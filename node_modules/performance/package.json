{
  "_args": [
    [
      {
        "raw": "performance",
        "scope": null,
        "escapedName": "performance",
        "name": "performance",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/www/SkyHub"
    ]
  ],
  "_from": "performance@latest",
  "_id": "performance@1.1.1",
  "_inCache": true,
  "_location": "/performance",
  "_nodeVersion": "0.10.45",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/performance-1.1.1.tgz_1472816705540_0.11720405309461057"
  },
  "_npmUser": {
    "name": "alexfernandez",
    "email": "alexfernandeznpm@gmail.com"
  },
  "_npmVersion": "2.15.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "performance",
    "scope": null,
    "escapedName": "performance",
    "name": "performance",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/performance/-/performance-1.1.1.tgz",
  "_shasum": "46defb5852213a6d6a60461f602b950e47238194",
  "_shrinkwrap": null,
  "_spec": "performance",
  "_where": "/www/SkyHub",
  "bin": {
    "performance": "bin/performance.js"
  },
  "bugs": {
    "url": "https://github.com/alexfernandez/performance/issues"
  },
  "contributors": [
    {
      "name": "Alex Fernández",
      "email": "alexfernandeznpm@gmail.com"
    }
  ],
  "dependencies": {
    "log": "*",
    "prototypes": "*",
    "stdio": "*",
    "testing": "*"
  },
  "description": "A short and quick way to assess performance on a server.",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "46defb5852213a6d6a60461f602b950e47238194",
    "tarball": "https://registry.npmjs.org/performance/-/performance-1.1.1.tgz"
  },
  "engines": {
    "node": "*"
  },
  "gitHead": "5719b161442b5e496478805ab58f5be9be55e62b",
  "homepage": "https://github.com/alexfernandez/performance",
  "keywords": [
    "performance",
    "benchmark",
    "evaluation"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "alexfernandez",
      "email": "alexfernandeznpm@gmail.com"
    }
  ],
  "name": "performance",
  "optionalDependencies": {},
  "private": false,
  "readme": "# performance\n\nA short and slick node.js performance measurement.\n\n## Installation\n\nSimply install with:\n\n    $ npm install performance\n\nand run with:\n\n    $ npm start\n\nYou will get a measurement of performance on that particular machine,\nwhich can be compared with other instances.\n\n### Binary\n\nIf you want to install a binary that you can run from any path:\n\n    $ sudo npm install -g performance\n\nAnd the binary will be called simply performance:\n\n    $ performance\n\nYou can run it from any path and with any user.\n\n#### Options\n\n* *file*: Output results to a file. `performance --file out.txt` is equivalent\n  to `performance > out.txt`\n* *json*: Show benchmark results in JSON format\n* *seconds*: Number of seconds to run\n* *version*: Show version number and exit\n\n### Programmatic Use\n\nOnce installed, you can use performance from your own packages. Simply require\nit, and invoke the function `runBenchmarks()`. It accept an object with the same\noptions as running it from the CLI:\n\n```\nvar performance = require('performance');\nvar results = performance.runBenchmarks();\nconsole.log(results);\n```\n\nThis will show an object with a lot of results, each with iterations per second and nanoseconds per iteration:\n\n```\n{\n\tnil: {\n            seconds: 1.03,\n            ips: 1.65844e+8,\n            ns: 6,\n    },\n\t...\n}\n```\n\n## Sample run\n\nOn my machine with Node.js v0.10.25: Intel(R) Core(TM) i3-2120T CPU @ 2.60GHz.\n\n```\n$ npm start\n\n> performance@0.0.2 start /home/chenno/projects/performance\n> node index.js\n\n[Mon Nov 10 2014 11:42:42 GMT+0100 (CET)] INFO Running benchmarks for 1000 ms\nFunction nil running for 1 second: 1.55439e+8 iterations per second\nFunction util._extend() running for 1 second: 5.3891e+7 iterations per second\nFunction sha1-token running for 1 second: 1.9223107569721114e+5 iterations per second\nFunction sha256-token running for 1.01 second: 1.8172790466732872e+5 iterations per second\nFunction replaceAll() running for 1 second: 4.445554445554446e+5 iterations per second\nFunction match().join() running for 1 second: 8.09e+5 iterations per second\nFunction for().toLowerCase() running for 1 second: 8.86e+5 iterations per second\nFunction for().charCodeAt() running for 1 second: 1.974e+6 iterations per second\nFunction timestamp running for 1 second: 1.671e+6 iterations per second\nFunction array access running for 1 second: 4.087736789631107e+4 iterations per second\nFunction object access running for 1.02 second: 3.7401574803149604e+4 iterations per second\nFunction string + running for 1 second: 2.1568e+7 iterations per second\nFunction string replace running for 1 second: 1.5356e+7 iterations per second\nFunction string replace all running for 1 second: 4.11e+6 iterations per second\nFunction parseInt running for 1 second: 2.9648e+7 iterations per second\nFunction | 0 running for 1 second: 2.2428e+7 iterations per second\nFunction Math.random() running for 1 second: 3.822e+6 iterations per second\nFunction buffer concat running for 1 second: 1.9541375872382853e+5 iterations per second\nFunction string concat running for 1 second: 8.959e+6 iterations per second\nFunction string array concat running for 1 second: 4.184e+6 iterations per second\nFunction for loop running for 1 second: 4.2657342657342664e+5 iterations per second\nFunction forEach() running for 1.01 second: 2.180376610505451e+4 iterations per second\nFunction for..in running for 1.03 second: 1.0689990281827017e+4 iterations per second\nFunction for function running for 1 second: 1.00597609561753e+5 iterations per second\n```\n\nIt is similar to the performance on a large Amazon AWS instance. Note that most of the time,\nwhat you are paying for on Amazon is more cores, not better ones.\n\n## Some interesting points\n\nNote that a regular `for` loop is more than 20 times faster than `forEach()`,\nand that even a `forFun()` function that emulates `forEach()` can easily be made\nto run 5 times faster than `forEach()`.\n\n## Extending\n\nAdd you own benchmark on `index.js`: simply give it a name and a function\nthat can be called repeatedly.\n\n    benchmark(name, operation);\n\nExample:\n\n    benchmark('replaceAll()', function()\n    {\n        return token.replaceAll('=', '').replaceAll('/', '').replaceAll('+', '').toLowerCase();\n    });\n\nDon't forget to send a Pull Request!\n\n## The MIT License\n\nCopyright (c) 2014 Alex Fernández <alexfernandeznpm@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/alexfernandez/performance.git"
  },
  "scripts": {
    "start": "node bin/performance.js",
    "test": "node index.js"
  },
  "version": "1.1.1"
}
